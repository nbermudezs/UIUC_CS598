__author__ = "Nestor Bermudez"
__license__ = "MIT"
__version__ = "1.0.0"
__email__ = "nab6@illinois.edu"
__status__ = "Development"


import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from scipy.stats import f_oneway


sns.set(style="whitegrid")


mashup_22 = {
    'overall': {
        'F1': [0.7565187159578166, 0.7677169966030223, 0.772927791966566, 0.7561031782588667, 0.7687456201822005, 0.7616272292808021, 0.7701430066271365, 0.7703114024818544, 0.7538354253835425, 0.7645481049562682],
        'Accuracy': [0.5788900979325353, 0.6006528835690969, 0.6039173014145811, 0.5843307943416758, 0.6093579978237215, 0.6022850924918389, 0.6109902067464635, 0.6022850924918389, 0.5859630032644179, 0.6011969532100109],
        'Recall': [0.6776001660784721, 0.6944267853358762, 0.6915247195679268, 0.6764887698330929, 0.6959187989004018, 0.678082191780822, 0.690863579474343, 0.6942392909896603, 0.6724030686294837, 0.6896696823059121],
        'Precision': [0.8562434417628542, 0.858302776322682, 0.8760526315789474, 0.8569564082484991, 0.8585963996869292, 0.8686519542674821, 0.8699763593380615, 0.8651064948724692, 0.8577096006347527, 0.8576661433804291]
    }
}
mashup_211 = {
    'overall': {
        'F1': [0.5505560307955518, 0.5512820512820513, 0.5604157644001734, 0.5465648854961832, 0.5456369107321966, 0.5478592623993217, 0.5340296775263201, 0.5480402945907051, 0.5603316974107294, 0.553514242373167],
        'Accuracy': [0.37734915924826906, 0.36251236399604353, 0.3991097922848665, 0.37932739861523246, 0.3818001978239367, 0.39762611275964393, 0.380811078140455, 0.37833827893175076, 0.40059347181008903, 0.39317507418397624],
        'Recall': [0.4269036879808968, 0.42414016872160937, 0.43610137503370183, 0.42007822685788787, 0.42051017778922956, 0.4214164601539063, 0.4086007865026005, 0.4248031496062992, 0.43179447052686487, 0.4287206266318538],
        'Precision': [0.7750481695568401, 0.7872801734521802, 0.7838623697601164, 0.7820388349514563, 0.7767729652546407, 0.782703488372093, 0.7705741626794258, 0.7720009539709038, 0.7978313253012048, 0.780789348549691]
    }
}

graphsage_22 = {
    'overall': {
        'F1': [0.7746512177819814, 0.7858682634730539, 0.786633604912032, 0.8017610661589719, 0.785705861540276, 0.7826699542092286, 0.785172903837044, 0.7792602996254681, 0.7868504772004242, 0.7807336224071253],
        'Accuracy': [0.6392818280739935, 0.6588683351468988, 0.6507072905331882, 0.6670293797606094, 0.6441784548422198, 0.6354733405875952, 0.6420021762785637, 0.6267682263329706, 0.6507072905331882, 0.6332970620239391],
        'Recall': [0.685069008782936, 0.7019683354728284, 0.6949718339244731, 0.7125634517766497, 0.6935248802831564, 0.6884941127866143, 0.6952600671140939, 0.6838537387017255, 0.6940345042610684, 0.6858142886555487],
        'Precision': [0.8911860718171926, 0.8925462459194777, 0.9061479869423286, 0.9164853101196954, 0.9061479869423286, 0.9066920565832427, 0.9017954298150164, 0.9056039173014145, 0.9083242655059848, 0.9061479869423286]
    }
}
graphsage_211 = {
    'overall': {
        'F1': [0.5727026318090409, 0.5730556736081597, 0.5703395703395704, 0.5799948307056086, 0.5741824440619621, 0.5795736666381304, 0.5774946921443737, 0.5731156651615144, 0.5670120604722269, 0.5797253564243856],
        'Accuracy': [0.4352126607319486, 0.4297725024727992, 0.43570722057368944, 0.4342235410484669, 0.4248269040553907, 0.4332344213649852, 0.43768545994065283, 0.4268051434223541, 0.4421364985163205, 0.4406528189910979],
        'Recall': [0.4429866089544163, 0.43660147649268227, 0.43893333333333334, 0.44506148353827846, 0.440337909186906, 0.44323687311771637, 0.44958677685950416, 0.4416488222698073, 0.43182406209573093, 0.44850453376640953],
        'Precision': [0.809841740850643, 0.8335806132542037, 0.8140454995054401, 0.8323442136498517, 0.8249258160237388, 0.8370425321463897, 0.8071216617210683, 0.8160237388724035, 0.8254203758654797, 0.8194856577645895]
    }
}


mashup = {
    22: mashup_22,
    211: mashup_211
}

graphsage = {
    22: graphsage_22,
    211: graphsage_211
}


def summarize_replications(name, data):
    f1 = np.mean(data['overall']['F1'])
    accuracy = np.mean(data['overall']['Accuracy'])
    precision = np.mean(data['overall']['Precision'])
    recall = np.mean(data['overall']['Recall'])
    return [name, f1, accuracy, precision, recall]


def replications_std(name, data):
    return [
        name,
        np.std(data['overall']['F1']),
        np.std(data['overall']['Accuracy']),
        np.std(data['overall']['Precision']),
        np.std(data['overall']['Recall'])
    ]


data = np.array([
    # method, F1, Accuracy, Precision, Recall
    summarize_replications('Mashup', mashup_211),
    summarize_replications('GraphSAGE', graphsage_211)
])

error_records = np.array([
    replications_std('Mashup', mashup_211),
    replications_std('GraphSAGE', graphsage_211)
])


def comparison_bar_plot(columns=['Method', 'F1', 'Accuracy', 'Precision', 'Recall']):
    df = pd.DataFrame.from_records(data, columns=columns, index='Method').astype({
        'F1': float,
        'Accuracy': float,
        'Precision': float,
        'Recall': float
    })
    errors = pd.DataFrame.from_records(error_records, columns=['Method', 'F1', 'Accuracy', 'Precision', 'Recall'], index='Method').astype({
        'F1': float,
        'Accuracy': float,
        'Precision': float,
        'Recall': float
    })
    ax = df.transpose().plot.bar(yerr=errors.transpose())
    for item in ax.get_xticklabels():
        item.set_rotation('horizontal')
    plt.title('Overall performance comparison')
    plt.savefig('overall_comparison-22-labels.png')


def anova(data_a, data_b):
    metrics = ['F1', 'Accuracy', 'Precision', 'Recall']
    for metric in metrics:
        _, p_value = f_oneway(data_a['overall'][metric], data_b['overall'][metric])
        print('Metric: {} p-value: {}'.format(metric, p_value))


if __name__ == '__main__':
    # comparison_bar_plot()
    print('22 labels')
    anova(mashup_22, graphsage_22)
    print('=' * 120)
    print
    print('211 labels')
    anova(mashup_211, graphsage_211)
    print('=' * 120)